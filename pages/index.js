import styles from "../styles/Home.module.css";
import Head from "next/head";
import {v4 as uuidv4} from 'uuid'
import {useState,useEffect} from 'react'

// pour utiliser les données qui sont retournées d un fichier cote client il faut mettre en parametres props
export default function Home(props) {

  const [state,setState] = useState(false);

  useEffect(() => {
    newWord()
  }, [])

  const newWord = () => {
    fetch(`/api/vocapi`)
    .then(response => response.json())
    .then(data => setState(data))
  }

let randomWord;
if(state){
  const array = state.englishList[0].data;
  randomWord = array[Math.floor(Math.random() * array.length)].en;
  console.log(randomWord)
}


  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <title className={styles.titre}>Titre</title>
      </Head>
      <div>
        
         {/* tableau avec le array de vocabulaire
         <h1 className={styles.titre}>Vocabulaire de base</h1>
        <table className={styles.tableau}>
          <tbody>
            {props.array.map( (el) => (
              <tr key={uuidv4()}>
                <td>{el.fr}</td>
                <td>{el.en}</td>
              </tr>
            ))}
          </tbody>
        </table> */}

        <h1 className="text-center p-3">Mots au hasard</h1>
        <button 
        onClick={newWord}
        className="btn btn-primary d-block m-auto">GET RANDOM WORD</button>
        <h2 className="text-center p-3">{randomWord}</h2>
      </div>
    </>
  );
}

// methode utilisée pour appeler des données d'une api, d une bdd (ici il s agit d un dossier dans data )
// de maniere assyncrome puisqu on attends les donnees
export async function getStaticProps() {
  // voici les données qui arrivent
  const data = await import(`/data/vocabulary.json`);

  // on extrait le tableau de données dans array avec le nom du tableau, dans le fichier il s appelle vocabulary
  const array = data.vocabulary;

  //  Si on veut retourner une erreur 404 ssi par exemple le tableau est vide 
  if (array.length === 0){
    return {
  //     notFound : true
      redirect: {
        destination: "./isr"
      }
    }
  }

  if (array.length === 0){
    return {
      notFound : true
    }
  }

  return {
    // et je retourne un objet qui doit s appeler props! c est obligatoire
    props: {
      array: array,
    },
  };
}
